#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
psyclab/muscle/brown.py
Vince Enachescu 2019
"""

import numpy as np


class BrownMuscleModel:
    """
    Muscle model based off the work of Cheng, Brown et al.

    [1] Cheng, E. J., Brown, I. E., & Loeb, G. E. (2000).
    Virtual muscle: a computational approach to understanding the effects of muscle properties on motor control.
    Journal of Neuroscience Methods.
    [2]
    """

    def __init__(self, muscle_length=1.0, pcsa=1.0, limits=(0.6, 1.1)):
        """

        :param muscle_length:
        :param pcsa: Phsyiological cross section area
        :param limits:
        """

        self.resting_length = muscle_length
        self.length = 1.0
        self.limits = tuple(limits)
        self.velocity = 0.0
        self.activation = 0.0
        self.limits = limits
        self.pcsa = pcsa

    def step(self, new_length=None, neural_input=0.0, time_step=0.001):
        """
        Step the dynamical simulation of the muscle model forward

        :param new_length:
        :param neural_input:
        :param time_step:
        :return:
        """

        if new_length is not None:
            self.step_length(new_length, time_step=time_step)

        self.step_activation(neural_input, time_step=time_step)

    def step_length(self, muscle_length, time_step=0.001):
        """
        Update the length of the muscle and the velocity of its change

        :param muscle_length:
        :param time_step:
        :return:
        """

        length = np.min((np.max((muscle_length / self.resting_length, self.limits[0])), self.limits[1]))
        velocity = ((length * self.resting_length) - self.length) / time_step
        self.length, self.velocity = length, velocity

    def step_activation(self, neural_input, time_step=0.001, tau_activation=50, tau_deactivation=66):
        """
        Step forward the dynamical simulation of the neural input to the muscle

        :param neural_input:
        :param time_step:
        :param tau_activation:
        :param tau_deactivation:
        :return:
        """

        if neural_input > self.activation:
            tau = tau_deactivation + neural_input * (tau_activation - tau_deactivation)
        else:
            tau = tau_deactivation

        self.activation += ((neural_input - self.activation) / (tau / 1000.0)) * time_step

    @property
    def T(self):
        """ Muscle tension """
        return 31.8 * self.pcsa * self.tension(self.A, self.l, self.v)

    @property
    def l(self):
        """ Normalized muscle length """
        return self.length

    @property
    def v(self):
        return self.velocity

    @property
    def a(self):
        """ Descending neural activation level """
        return self.activation

    @property
    def A(self):
        """ Activity level at neuro-muscular junction """
        return self.activity(self.a, self.l)

    @staticmethod
    def tension(activity, length, velocity):
        return (activity * (BrownMuscleModel.force_length(length) * BrownMuscleModel.force_velocity(length, velocity))
                + BrownMuscleModel.force_passive(length))

    @staticmethod
    def activity(activation, length):
        """ Activity level as a function of muscle length and activation """

        nf = 2.11 + 4.16 * (1.0 / length - 1.0)
        return 1.0 - np.exp(-np.power(activation / (0.56 * nf), nf))

    @staticmethod
    def force_length(length):
        """ Force - length scaling factor """
        return np.exp(-np.power(np.abs((np.power(length, 1.93) - 1) / 1.03), 1.87))

    @staticmethod
    def force_velocity(length, velocity):
        """ Force - velocity scaling factor """

        if velocity <= 0.0:
            return (-5.72 - velocity) / (-5.72 + (1.38 + 2.09 * length) * velocity)

        return (0.62 - (-3.12 + 4.21 * length - 2.67 * (length ** 2)) * velocity) / (0.62 + velocity)

    @staticmethod
    def force_passive(length):
        """ Passive force generated by muscle fibers and tendons """
        return -0.02 * (np.exp(13.8 - 18.7 * length) - 1)
